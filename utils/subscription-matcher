#!/bin/bash

# Retrieve the jar path using build-classpath with using the first package name that works
function jarFromName {
    local ALTERNATIVE_NAMES=$*
    local JAR

    while [[ $# -gt 0 ]]
    do
        if JAR=$(build-classpath "$1" 2> /dev/null); then
            echo "$JAR"
            return 0
        else
            shift
        fi
    done

    echo "Unable to locate a dependency for any of the specified package names: $ALTERNATIVE_NAMES" >&2
    return 1
}

# Build the classpath string from a list of dependencies with alternative package names
function buildClassPath {
    local JARS=()

    while [[ $# -gt 0 ]]
    do
        # Set IFS as the alternative package names are comma separated
        if ! JARS+=($(IFS=", "; jarFromName $1)); then
            echo ""
            return 1
        fi

        shift
    done

    # Concatenate all the jar paths with a colon
    (IFS=":"; echo "${JARS[*]}")
}


JAVA_OPTS="-server -Xmx2G --add-opens=java.base/java.lang=ALL-UNNAMED"
EXTRA_ARGS=""

DEPENDENCIES=(
    "antlr3-runtime, anlr-runtime-3"
    "apache-commons-lang3, commons-lang3"
    "apache-commons-math, commons-math3"
    "apache-commons-cli, commons-cli"
    "apache-commons-csv, commons-csv"
    "drools-compiler"
    "drools-core"
    "ecj"
    "google-gson"
    "guava"
    "kie-api"
    "kie-internal"
    "kie-soup-commons"
    "kie-soup-project-datamodel-commons"
    "kie-soup-maven-support"
    "log4j/log4j-api"
    "log4j/log4j-core"
    "log4j/log4j-slf4j-impl"
    "mvel2"
    "optaplanner-core"
    "slf4j/api"
    "xstream"
    "xmlpull"
    "xpp3"
    "protobuf"
    "reflections"
    "subscription-matcher"
)


# Build the classpath, fail if some jars are missing
if ! CLASSPATH=$(buildClassPath "${DEPENDENCIES[@]}"); then
    exit 1
fi

exec java $JAVA_OPTS -cp "$CLASSPATH" $EXTRA_ARGS com.suse.matcher.Main "$@"
